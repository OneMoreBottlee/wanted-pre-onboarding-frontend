[{"/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/index.tsx":"1","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/App.tsx":"2","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/routes/index.tsx":"3","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/pages/mainPage.tsx":"4","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/pages/signinPage.tsx":"5","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/pages/todoPage.tsx":"6","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/pages/singupPage.tsx":"7","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/Components/todo.tsx":"8","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/apis/index.ts":"9"},{"size":228,"mtime":1686470073040,"results":"10","hashOfConfig":"11"},{"size":195,"mtime":1686470783161,"results":"12","hashOfConfig":"11"},{"size":542,"mtime":1686572530966,"results":"13","hashOfConfig":"11"},{"size":846,"mtime":1686572498858,"results":"14","hashOfConfig":"11"},{"size":1695,"mtime":1686572486867,"results":"15","hashOfConfig":"11"},{"size":1834,"mtime":1686583179140,"results":"16","hashOfConfig":"11"},{"size":1582,"mtime":1686572478891,"results":"17","hashOfConfig":"11"},{"size":1912,"mtime":1686583154905,"results":"18","hashOfConfig":"11"},{"size":2642,"mtime":1686583150561,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"equnli",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/index.tsx",[],[],"/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/App.tsx",[],[],"/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/routes/index.tsx",[],[],"/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/pages/mainPage.tsx",[],[],"/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/pages/signinPage.tsx",["51"],[],"import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { signin } from \"../apis\";\n\nexport default function SignInPage () {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [validate, setValidate] = useState(false);\n    const navigate = useNavigate();\n\n    // 로그인\n    const signinHandler = async (event: any) => {\n        event.preventDefault()\n        const token = await signin(email, password)\n\n        // 정상 로그인(토큰 값이 포함된 경우)인 경우\n        // 로컬 스토리지에 토큰을 저장하고, todo로 이동한다.\n        if(token !== undefined){\n            localStorage.setItem(\"access_token\", token)\n            navigate('/todo')\n        }\n    }\n\n    // validate\n    // ID @ 포함 & PW 8자 이상\n    useEffect(() => {\n        (email.includes(\"@\") && password.length >= 8) ? setValidate(true) : setValidate(false)\n    }, [email, password])\n\n    // 로그인 여부에 따른 리다이렉트 - 토큰이 있으면 TODO 로 이동\n    useEffect(() => {\n        const token = localStorage.getItem(\"access_token\")\n        if (token) navigate(\"/todo\")\n    }, [])\n\n    return (\n        <form onSubmit={signinHandler}>signin\n            <input data-testid=\"email-input\" onChange={(e) => setEmail(e.target.value)} />\n            <input data-testid=\"password-input\" onChange={(e) => setPassword(e.target.value)} />\n            {validate\n                ? <button style={{ height: \"20px\" }} data-testid=\"signup-button\">Sign</button>\n                : <button disabled style={{ height: \"20px\" }} data-testid=\"signin-button\">Sign</button>}\n        </form>\n    )\n}","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/pages/todoPage.tsx",["52"],[],"import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createTodo, deleteTodo, getTodos } from \"../apis\";\nimport ToDo from \"../Components/todo\";\nimport { TodoListData } from \"../types/todo\";\n\nexport default function TodoPage() {\n    const [todoList, setTodoList] = useState<TodoListData[]>([])\n    const [newTodo, setNewTodo] = useState(\"\")\n    const navigate = useNavigate()\n    const token = localStorage.getItem(\"access_token\")\n\n    // 페이지 시작시\n    useEffect(() => {\n        // 토큰이 있다면 Todo 리스트 받아오기\n        // 토큰이 없다면 로그인 페이지로 이동\n        token ? updateList() : navigate(\"/signin\")\n    }, [])\n\n    // 리스트 업데이트\n    const updateList = async () => {\n        const list = await getTodos(token!)\n        setTodoList(list)\n    }\n\n    // 투두 생성\n    const createHandler = async () => {\n        const newToDo = await createTodo(token!, newTodo)\n        setTodoList((old) => [...old, newToDo])\n    }\n\n    // 투두 삭제\n    const deleteHandler = (id: number) => {\n        return async () => {\n            await deleteTodo(token!, id)\n            const remainList = todoList.filter(todo => todo.id !== id)\n            setTodoList(remainList)\n        }\n    }\n\n    return (\n        <>\n            <button onClick={() => navigate(\"/\")}>메인 이동</button>\n            <div>To Do를 입력하세요\n                <input data-testid=\"new-todo-input\" onChange={(e) => setNewTodo(e.target.value)} />\n                <button data-testid=\"new-todo-add-button\" onClick={createHandler}>추가</button>\n            </div>\n            <div>To Do List</div>\n            {todoList.map(el => {\n                return <ToDo key={el.id} props={el} deleteHandler={deleteHandler} />\n            })}\n        </>\n    )\n}\n\n","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/pages/singupPage.tsx",["53"],[],"import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { signup } from \"../apis\";\n\nexport default function SignUpPage () {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [validate, setValidate] = useState(false);\n    const navigate = useNavigate();\n\n    // 회원가입\n    const signupHandler = async (event: any) => {\n        event.preventDefault()\n        const response = await signup(email, password)\n        \n        // 회원가입 성공한 경우, 로그인 페이지로 이동\n        if(response?.status === 201){\n            navigate('/signin')\n        }\n    }\n\n    // validate\n    // ID @ 포함 & PW 8자 이상\n    useEffect(() => {\n        (email.includes(\"@\") && password.length >= 8) ? setValidate(true) : setValidate(false)\n    }, [email, password])\n\n    // 로그인 여부에 따른 리다이렉트 - 토큰이 있으면 TODO 로 이동\n    useEffect(() => {\n        const token = localStorage.getItem(\"access_token\")\n        if (token) navigate(\"/todo\")\n    }, [])\n\n    return (\n        <form onSubmit={signupHandler}>signup\n            <input data-testid=\"email-input\" onChange={(e) => setEmail(e.target.value)} />\n            <input data-testid=\"password-input\" onChange={(e) => setPassword(e.target.value)} />\n            {validate\n                ? <button style={{ height: \"20px\" }} data-testid=\"signup-button\">Sign</button>\n                : <button disabled style={{ height: \"20px\" }} data-testid=\"signup-button\">Sign</button>}\n        </form>\n    )\n}","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/Components/todo.tsx",["54"],[],"import { useState } from \"react\";\nimport { updateTodo } from \"../apis\";\nimport { TodoListData } from \"../types/todo\";\n\ninterface Props {\n    props: TodoListData;\n    deleteHandler: (id: number) => () => void;\n}\n\nexport default function ToDo({ props, deleteHandler }: Props) {\n    const { id, todo, isCompleted, userId } = props\n    const [isChcecked, setIsChecked] = useState(isCompleted)\n    const [nowDo, setNowDo] = useState(todo)\n    const [isEdit, setIsEdit] = useState(false)\n    const [editTodo, setEditTodo] = useState(nowDo)\n    const token = localStorage.getItem('access_token')\n\n    const checkHandler = () => {\n        setIsChecked(!isChcecked)\n        updateTodo(token!, id, todo, !isChcecked)\n    }\n\n    const editHandler = () => {\n        updateTodo(token!, id, editTodo, isChcecked)\n        setNowDo(editTodo)\n        setIsEdit(false)\n    }\n\n    return (\n        <li>\n            <label>\n                <input type=\"checkbox\" checked={isChcecked} onChange={checkHandler} />\n                {isEdit\n                    ? <input type=\"text\" defaultValue={nowDo} data-testid=\"modify-input\" onChange={(e) => setEditTodo(e.target.value)} />\n                    : <span>{nowDo}</span>\n                }\n            </label>\n            {\n                isEdit\n                    ? (\n                        <>\n                            <button data-testid=\"submit-button\" onClick={editHandler}>제출</button>\n                            <button data-testid=\"cancel-button\" onClick={() => setIsEdit(false)}>취소</button>\n                        </>\n                    ) : (\n                        <>\n                            <button data-testid=\"modify-button\" onClick={() => setIsEdit(true)}>수정</button>\n                            <button data-testid=\"delete-button\" onClick={deleteHandler(id)}>삭제</button>\n                        </>\n                    )}\n\n        </li>\n    )\n}","/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/apis/index.ts",[],[],{"ruleId":"55","severity":1,"message":"56","line":34,"column":8,"nodeType":"57","endLine":34,"endColumn":10,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":18,"column":8,"nodeType":"57","endLine":18,"endColumn":10,"suggestions":"60"},{"ruleId":"55","severity":1,"message":"56","line":32,"column":8,"nodeType":"57","endLine":32,"endColumn":10,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":11,"column":36,"nodeType":"64","messageId":"65","endLine":11,"endColumn":42},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["66"],"React Hook useEffect has missing dependencies: 'navigate', 'token', and 'updateList'. Either include them or remove the dependency array.",["67"],["68"],"@typescript-eslint/no-unused-vars","'userId' is assigned a value but never used.","Identifier","unusedVar",{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},{"desc":"69","fix":"73"},"Update the dependencies array to be: [navigate]",{"range":"74","text":"75"},"Update the dependencies array to be: [navigate, token, updateList]",{"range":"76","text":"77"},{"range":"78","text":"75"},[1066,1068],"[navigate]",[638,640],"[navigate, token, updateList]",[987,989]]