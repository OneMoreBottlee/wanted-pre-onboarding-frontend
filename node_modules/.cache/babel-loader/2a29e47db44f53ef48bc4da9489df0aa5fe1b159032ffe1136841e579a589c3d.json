{"ast":null,"code":"import axios from \"axios\";\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;\n\n// 1. Auth 관련\n// 1-1. SignUp - 회원가입\nexport const signup = async (email, password) => {\n  try {\n    const response = await axios.post(\"auth/signup\", {\n      email,\n      password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = response;\n    return data;\n  } catch (error) {\n    window.alert(`회원 가입 실패 !\\n ID는 @ 포함, PW는 8자리 이상이어야 합니다.`);\n  }\n};\n\n// 1-2. SignIn - 로그인\nexport const signin = async (email, password) => {\n  try {\n    const response = await axios.post(\"auth/signin\", {\n      email,\n      password\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = response.data.access_token;\n    return data;\n  } catch (error) {\n    window.alert(`로그인 실패 !\\n 계정 정보를 확인해주세요`);\n  }\n};\n\n// 2. ToDo 관련\n// 2-1. createTodo - Todo 생성\nexport const createTodo = async todo => {\n  const token = localStorage.getItem(\"access_token\");\n  try {\n    const response = await axios.post(\"/todos\", {\n      todo\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const data = response.data;\n    return data;\n  } catch (error) {\n    window.alert(`에러 발생 !\\n새로운 ToDo를 추가할 수 없습니다.`);\n  }\n};\n\n// 2-2. getTodo - Todo 리스트\nexport const getTodos = async () => {\n  const token = localStorage.getItem(\"access_token\");\n  try {\n    const response = await axios.get(\"todos\", {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const todos = response.data;\n    return todos;\n  } catch (error) {\n    window.alert(`에러 발생 !\\n현재 Todo 리스트를 가져올 수 없습니다.`);\n  }\n};\n\n// 2-3. updateTodo - Todo 수정\nexport const updateTodo = async (id, todo, isCompleted) => {\n  const token = localStorage.getItem(\"access_token\");\n  const data = {\n    todo,\n    isCompleted\n  };\n  try {\n    const response = await axios.put(`/todos/${id}`, data, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    window.alert(`에러 발생 !`);\n  }\n};\n\n// 2-4. deleteTodo - Todo 삭제","map":{"version":3,"names":["axios","defaults","baseURL","process","env","REACT_APP_SERVER_URL","signup","email","password","response","post","headers","data","error","window","alert","signin","access_token","createTodo","todo","token","localStorage","getItem","Authorization","getTodos","get","todos","updateTodo","id","isCompleted","put"],"sources":["/home/onemorebottlee/Desktop/wanted-pre-onboarding-frontend/src/apis/index.ts"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.baseURL = process.env.REACT_APP_SERVER_URL;\n\n// 1. Auth 관련\n// 1-1. SignUp - 회원가입\nexport const signup = async (email: string, password: string) => {\n  try {\n    const response = await axios.post(\n      \"auth/signup\",\n      { email, password },\n      { headers: { \"Content-Type\": \"application/json\" } }\n    );\n    const data = response;\n\n    return data;\n  } catch (error) {\n    window.alert(\n      `회원 가입 실패 !\\n ID는 @ 포함, PW는 8자리 이상이어야 합니다.`\n    );\n  }\n};\n\n// 1-2. SignIn - 로그인\nexport const signin = async (email: string, password: string) => {\n  try {\n    const response = await axios.post(\n      \"auth/signin\",\n      { email, password },\n      { headers: { \"Content-Type\": \"application/json\" } }\n    );\n    const data = response.data.access_token;\n\n    return data;\n  } catch (error) {\n    window.alert(`로그인 실패 !\\n 계정 정보를 확인해주세요`);\n  }\n};\n\n// 2. ToDo 관련\n// 2-1. createTodo - Todo 생성\nexport const createTodo = async (todo: string) => {\n  const token = localStorage.getItem(\"access_token\");\n  try {\n    const response = await axios.post(\n      \"/todos\",\n      { todo },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    const data = response.data;\n    return data;\n  } catch (error) {\n    window.alert(`에러 발생 !\\n새로운 ToDo를 추가할 수 없습니다.`);\n  }\n};\n\n// 2-2. getTodo - Todo 리스트\nexport const getTodos = async () => {\n  const token = localStorage.getItem(\"access_token\");\n  try {\n    const response = await axios.get(\"todos\", {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    const todos = response.data;\n    return todos;\n  } catch (error) {\n    window.alert(`에러 발생 !\\n현재 Todo 리스트를 가져올 수 없습니다.`);\n  }\n};\n\n// 2-3. updateTodo - Todo 수정\nexport const updateTodo = async (id: number, todo: string, isCompleted: boolean) => {\n    const token = localStorage.getItem(\"access_token\")\n    const data = {todo, isCompleted}\n    try{\n        const response = await axios.put(`/todos/${id}`, data, {\n            headers: {\n                Authorization: `Bearer ${token}`,\n                \"Content-Type\": \"application/json\"\n            }})\n        \n        return response.data\n    }catch(error){\n        window.alert(`에러 발생 !`)\n    }\n}\n\n// 2-4. deleteTodo - Todo 삭제"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}